services:
  gateway:
    image: gateway
    build:
      context: ./gateway
    ports:
      - "1337:1337"
    environment:
      - JWT_SECRET_KEY=2e4f746042bfe1d5d6a3d8f877696f45c5ad0ebc8dc76d75e80f35ed167420b1
      - LAB1_URL=http://lab1:5001
      - LAB2_URL=http://lab2:5002
      - LAB3_URL=http://lab3:5003
    networks:
      - db-network

  lab1:
    image: lab1
    ports:
      - "5001:5001"
    networks:
      - db-network

  lab2:
    image: lab2
    build:
      context: ./lab2
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      - POSTGRES_DB=postgres_db
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=strongpassword
      - JWT_SECRET_KEY=2e4f746042bfe1d5d6a3d8f877696f45c5ad0ebc8dc76d75e80f35ed167420b1
    networks:
      - db-network

  lab3:
    image: lab3
    build:
      context: ./lab3
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - POSTGRES_DB=postgres_db
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=strongpassword
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET_KEY=2e4f746042bfe1d5d6a3d8f877696f45c5ad0ebc8dc76d75e80f35ed167420b1
    networks:
      - db-network

  redis:
    image: redis:8.0.2-bookworm
    # volumes:
    #   - ./redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - db-network

  mongodb:
    image: mongo:8.0.10-noble
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=secret
    # volumes:
    #   - ./mongodb_data:/data/db
    networks:
      - db-network

  neo4j:
    image: neo4j:5.24.1-community
    container_name: neo4j
    environment:
      - NEO4J_AUTH=neo4j/strongpassword
    ports:
      - "7474:7474"
      - "7687:7687"
    # volumes:
    #   - ./neo4j_data:/data
    #   - ./neo4j_logs:/logs
    #   - ./neo4j_import:/import
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"] # Проверка HTTP-порта
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 40s # Время ожидания перед началом проверок
    networks:
      - db-network

  elasticsearch:
    image: elasticsearch:8.16.4
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - ELASTIC_PASSWORD=secret
      - xpack.security.http.ssl.enabled=false
    # volumes:
    #   - ./elastic_data:/usr/share/elasticsearch/data
    networks:
      - db-network

  postgres:
    image: debezium/postgres:13
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_DB: postgres_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5430:5432"
    volumes:
      # - ./pgdata:/var/lib/postgresql/data/pgdata
      - ./postgres-init:/docker-entrypoint-initdb.d
    command: ["postgres", "-c", "wal_level=logical"]
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres_user", "-d", "postgres_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - db-network

networks:
  db-network:
    # external: true  # Уберите или создайте вручную, если сеть не существует